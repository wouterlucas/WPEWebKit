include(GNUInstallDirs)

set(PROJECT_VERSION_MAJOR 0)
set(PROJECT_VERSION_MINOR 0)
set(PROJECT_VERSION_PATCH 20161117)
set(PROJECT_VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})
set(WPE_API_VERSION 0.1)

if (WTF_CPU_X86_64)
    set(ENABLE_FTL_DEFAULT ON)
else ()
    set(ENABLE_FTL_DEFAULT OFF)
endif ()

SET_AND_EXPOSE_TO_BUILD(ENABLE_DEVELOPER_MODE ${DEVELOPER_MODE})

WEBKIT_OPTION_BEGIN()

WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_3D_TRANSFORMS PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ACCELERATED_2D_CANVAS PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_GRID_LAYOUT PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_REGIONS PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_SELECTORS_LEVEL4 PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DATABASE_PROCESS PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DEVICE_ORIENTATION PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_LEGACY_ENCRYPTED_MEDIA_V1 PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_LEGACY_ENCRYPTED_MEDIA PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_FTL_JIT PRIVATE ${ENABLE_FTL_DEFAULT})
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_GAMEPAD PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_GEOLOCATION PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INDEXED_DATABASE PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INDEXED_DATABASE_IN_WORKERS PRIVATE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_CONTROLS_SCRIPT PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_SOURCE PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NATIVE_VIDEO PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NETSCAPE_PLUGIN_API PRIVATE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_REQUEST_ANIMATION_FRAME PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_TEXT_SINK PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_THREADED_COMPOSITOR PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_TOUCH_EVENTS PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_VIDEO PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_VIDEO_TRACK PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_VIEW_MODE_CSS_MEDIA PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_ANIMATIONS PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_AUDIO PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBGL PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_TIMING PUBLIC ON)

WEBKIT_OPTION_DEFINE(USE_GSTREAMER "Whether to use GStreamer support for Media" PUBLIC ON)
WEBKIT_OPTION_DEFINE(USE_GSTREAMER_GL "Whether to enable support for GStreamer GL" PRIVATE OFF)
WEBKIT_OPTION_DEFINE(USE_GSTREAMER_WEBKIT_HTTP_SRC "Whether to enable support for Media resources loading with WebKit" PRIVATE ON)
WEBKIT_OPTION_DEFINE(USE_HOLE_PUNCH_EXTERNAL "Transparent hole for the video player, rendering done by external application" PRIVATE OFF)
WEBKIT_OPTION_DEFINE(USE_HOLE_PUNCH_GSTREAMER "Transparent hole for the video player, rendering done by GStreamer and platform dependant sink" PRIVATE OFF)
WEBKIT_OPTION_DEFINE(USE_WESTEROS_SINK "Westeros-Sink to be used as video-sink for GStreamer video player" PUBLIC OFF)
WEBKIT_OPTION_DEFINE(USE_FUSION_SINK "Fusion-Sink to be used as video-sink for GStreamer video player" PUBLIC OFF)

WEBKIT_OPTION_DEPEND(ENABLE_WEB_AUDIO USE_GSTREAMER)
WEBKIT_OPTION_DEPEND(USE_GSTREAMER_GL USE_GSTREAMER)
WEBKIT_OPTION_DEPEND(USE_GSTREAMER_WEBKIT_HTTP_SRC USE_GSTREAMER)
WEBKIT_OPTION_DEPEND(USE_HOLE_PUNCH_GSTREAMER USE_GSTREAMER)
WEBKIT_OPTION_DEPEND(USE_WESTEROS_SINK USE_GSTREAMER)
WEBKIT_OPTION_DEPEND(USE_FUSION_SINK USE_GSTREAMER)

WEBKIT_OPTION_END()

if (ENABLE_PLAYREADY)
    add_definitions(-DUSE_PLAYREADY=1)
    find_package(Playready REQUIRED)
endif ()

set(ENABLE_WEBCORE ON)
set(ENABLE_WEBKIT OFF)
set(ENABLE_WEBKIT2 ON)
set(ENABLE_API_TESTS ${DEVELOPER_MODE})
set(ENABLE_TOOLS ON)

set(WTF_LIBRARY_TYPE STATIC)
set(JavaScriptCore_LIBRARY_TYPE STATIC)
set(WebCore_LIBRARY_TYPE STATIC)
set(WebKit2_OUTPUT_NAME WPEWebKit)
set(WebKit2_WebProcess_OUTPUT_NAME WPEWebProcess)
set(WebKit2_NetworkProcess_OUTPUT_NAME WPENetworkProcess)
set(WebKit2_DatabaseProcess_OUTPUT_NAME WPEDatabaseProcess)

find_package(ICU REQUIRED)
find_package(Threads REQUIRED)
find_package(ZLIB REQUIRED)
find_package(GLIB 2.38.0 REQUIRED COMPONENTS gio gio-unix gobject gthread gmodule)
find_package(GnuTLS 2.12.23 REQUIRED)

find_package(Cairo 1.10.2 REQUIRED)
find_package(Fontconfig 2.8.0 REQUIRED)
find_package(Freetype2 2.4.2 REQUIRED)
find_package(HarfBuzz 0.9.18 REQUIRED)
find_package(JPEG REQUIRED)
find_package(LibSoup 2.42.0 REQUIRED)
find_package(LibXml2 2.8.0 REQUIRED)
find_package(LibXslt 1.1.7 REQUIRED)
find_package(PNG REQUIRED)
find_package(Sqlite REQUIRED)

find_package(WebP)
if (WEBP_FOUND)
    SET_AND_EXPOSE_TO_BUILD(USE_WEBP TRUE)
endif ()

find_package(OpenGLES2 REQUIRED)
find_package(EGL REQUIRED)

find_package(WPE REQUIRED)

if (ENABLE_TV_CONTROL)
    find_package(WPETVControl REQUIRED)
endif ()

if (USE_WPEWEBKIT_BACKEND_BCM_RPI)
    find_package(BCMHost REQUIRED)
endif ()

if (USE_WPEWEBKIT_BACKEND_WESTEROS)
    find_package(Wayland REQUIRED)
    find_package(WaylandEGL REQUIRED)
    find_package(westeros REQUIRED)
endif (USE_WPEWEBKIT_BACKEND_WESTEROS)

if (USE_WPEWEBKIT_BACKEND_BCM_NEXUS_WAYLAND)
    find_package(Wayland REQUIRED)
endif (USE_WPEWEBKIT_BACKEND_BCM_NEXUS_WAYLAND)

if (ENABLE_MEDIA_STREAM)
    find_package(OpenWebRTC)
    if (NOT OPENWEBRTC_FOUND)
        message(FATAL_ERROR "OpenWebRTC is needed for ENABLE_MEDIA_STREAM.")
    endif ()
    SET_AND_EXPOSE_TO_BUILD(USE_OPENWEBRTC TRUE)
endif ()

if (ENABLE_VIDEO OR ENABLE_WEB_AUDIO)
    if (USE_GSTREAMER)
        set(GSTREAMER_COMPONENTS app audio pbutils)
        SET_AND_EXPOSE_TO_BUILD(USE_GSTREAMER TRUE)
        if (ENABLE_VIDEO)
            list(APPEND GSTREAMER_COMPONENTS video tag)
        endif ()

        if (ENABLE_WEB_AUDIO)
            list(APPEND GSTREAMER_COMPONENTS fft)
            SET_AND_EXPOSE_TO_BUILD(USE_WEBAUDIO_GSTREAMER TRUE)
        endif ()

        find_package(GStreamer 1.2.3 REQUIRED COMPONENTS ${GSTREAMER_COMPONENTS})

        if (USE_GSTREAMER_GL)
            if (NOT PC_GSTREAMER_GL_FOUND)
                message(FATAL_ERROR "GStreamerGL is needed for USE_GSTREAMER_GL.")
            endif ()
        endif ()
        # FIXME: What about MPEGTS support? USE_GSTREAMER_MPEGTS?
    endif ()
endif ()

if (ENABLE_ACCELERATED_2D_CANVAS)
    find_package(CairoGL 1.10.2 REQUIRED COMPONENTS cairo-egl)
endif ()

if (ENABLE_LEGACY_ENCRYPTED_MEDIA_V1 OR ENABLE_LEGACY_ENCRYPTED_MEDIA)
    find_package(LibGcrypt REQUIRED)
    if (ENABLE_OCDM)
        find_package(OCDM REQUIRED)
        add_definitions(-DUSE_OCDM=1)
    endif ()
endif ()

if (ENABLE_BREAKPAD)
    find_package(Breakpad REQUIRED)
    add_definitions(-DUSE_BREAKPAD=1)
endif ()

add_definitions(-DBUILDING_WPE__=1)
add_definitions(-DDATA_DIR="${CMAKE_INSTALL_DATADIR}")

set(USE_UDIS86 1)

SET_AND_EXPOSE_TO_BUILD(USE_OPENGL_ES_2 TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_EGL TRUE)

SET_AND_EXPOSE_TO_BUILD(ENABLE_GRAPHICS_CONTEXT_3D TRUE)

SET_AND_EXPOSE_TO_BUILD(USE_TEXTURE_MAPPER TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_TEXTURE_MAPPER_GL TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_TILED_BACKING_STORE TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_COORDINATED_GRAPHICS TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_COORDINATED_GRAPHICS_THREADED TRUE)

SET_AND_EXPOSE_TO_BUILD(USE_EGL TRUE)
SET_AND_EXPOSE_TO_BUILD(WTF_PLATFORM_BCM_NEXUS ${USE_WPEWEBKIT_PLATFORM_BCM_NEXUS})
SET_AND_EXPOSE_TO_BUILD(WTF_PLATFORM_INTEL_CE ${USE_WPEWEBKIT_PLATFORM_INTEL_CE})
SET_AND_EXPOSE_TO_BUILD(WTF_PLATFORM_WESTEROS ${USE_WPEWEBKIT_PLATFORM_WESTEROS})
SET_AND_EXPOSE_TO_BUILD(WTF_PLATFORM_BROADCOM ${USE_WPEWEBKIT_PLATFORM_BROADCOM})

if (ENABLE_LOGS)
    SET_AND_EXPOSE_TO_BUILD(LOG_DISABLED FALSE)
    SET_AND_EXPOSE_TO_BUILD(ERROR_DISABLED FALSE)
    SET_AND_EXPOSE_TO_BUILD(FATAL_DISABLED FALSE)
endif ()

set(FORWARDING_HEADERS_DIR ${DERIVED_SOURCES_DIR}/ForwardingHeaders)

# Build with -fvisibility=hidden to reduce the size of the shared library.
# Not to be used when building the WebKitTestRunner library.
if (NOT DEVELOPER_MODE)
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -fvisibility=hidden")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fvisibility=hidden -fvisibility-inlines-hidden")
endif ()
